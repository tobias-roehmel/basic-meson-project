
# add c compiler arguments
c_args += '-DEXAMPLE_DEF=1'

# collect source files for this folder
example_folder_srcs = ['src/example_folder_src.c']
# add them to the source list that is used to compile the entire firmware
srcs += files(example_folder_srcs)

# add include directories
incdirs += include_directories('include')


# generate error messages if one tries to to test stuff on non x86_64 target machine
if target_machine.cpu() == 'x86_64'
        # executable for unit testing
        example_folder_test_firmware = executable(
                'example_folder_test_runner',
                ['test/test_example_folder.c', example_folder_srcs],    # use source files and the test main file
                name_suffix         : 'elf',
                c_args              : [c_args,'-fprofile-arcs', '-ftest-coverage'], # add flags for profiling/test-coverage with gcov
                link_args           : [link_args, '-lgcov','--coverage'],   # add flags for profiling/test-coverage with gcov
                dependencies        : [unity_dep],  # depends on the unity library
                include_directories : ['include'],
                build_by_default    : false )


        # this might be hacky since the output of this target is garbage
        # but it makes it possible to have a dependency for the reports target
        # and i think since a asdf file is never created the tests dependency is always run
        run_example_folder_tests = custom_target(
                'example_folder_tests',
                command : ['@0@/example_folder_test_runner.elf'.format(meson.current_build_dir())],
                output  : ['asdf'],
                depends :  example_folder_test_firmware
        )

        test_targets += run_example_folder_tests


        # generate website with coverage information by using scripts/coverage_report.sh
        # the test binary needs to be executed to generate gcda files
        run_target(
                'example_folder_coverage_report',
                command : [
                                '@0@/scripts/coverage_report.sh'.format(meson.source_root()),
                                '@0@/example_folder_test_runner.elf.p'.format(meson.current_build_dir()),   # folder that contains the gcda and gcno files
                                '@0@/example_folder_test.info'.format(meson.current_build_dir()),   # location of .info file generated by lcov
                                '@0@/coverage_report'.format(meson.current_build_dir()) # location of website generated by genhtml
                        ],
                depends : run_example_folder_tests
        )
else
        # generate error messages if one tries to to test stuff on non x86_64 target machine
        run_example_folder_tests = custom_target(
                'example_folder_tests',
                command : ['bash', '-c', 'echo cant execute tests for non x86_64 target machine'],
                output  : ['asdf']
        )

        run_target(
                'example_folder_coverage_report',
                command : ['bash', '-c', 'echo cant generate coverage report for non x86_64 target machine']
        )
endif